{% extends 'ObrazkiwbazieBundle:ObrazkiwKategorii:show.html.twig' %}

{% block produkt -%}


    {% if typ=='płótno' %}



        {% set margines=50 %}
        {% set wymiary=31*2 %}


        {#{{ dump(entity)}}#}

        <img id="orig" src="{{ asset(entity.getUploadMinaturkaDir~"/" ~ entity.nazwaObrazka  ) }}" alt=""
             hidden="hidden"/>
        {#ukryty obrazek poto żeby to działało#}


        <canvas id="plotno" width="{{ entity.size.width+margines*2 }}" height="{{ entity.size.Height+margines*2 }}">
            Your browser does not support the HTML5 canvas tag.
        </canvas>


        {#<img id="orig" src="{{ asset(entity.getUploadMinaturkaDir~"/" ~ entity.nazwaObrazka  ) }}" width="600" height="337">#}

        {#<canvas  width="600" height="337"></canvas>#}




        <p id="pudelko"></p>

        <button id="loginLink" onclick="toggleTable();" class="btn-primary">pokaż tabele</button>

        {{ form_start(form) }}

        {{ form_label(form.wrapy) }}
        {{ form_widget(form.wrapy,{'attr':{'onchange':'funkcja()'}}) }}


        {{ form_errors(form.wrapy) }}

        <table id="tabelaZwymiarami" border="1">

            <tr>
                <th></th>
                {% for m in form.margines.vars.choices %}
                    <th> {{ m.label }}</th>
                {% endfor %}
            </tr>

            {% for w in form.wymiar.vars.choices %}
                <tr>
                    <th>{{ w.label }}</th>

                    {% for m in form.margines.vars.choices %}



                        {% if
                        (m.label=='18mm'   and  w.value>wymiary+4 and w.value<wymiary+11)
                        or(m.label=='25mm'   and  w.value>wymiary+3 and w.value<wymiary+19)
                        or(m.label=='32mm')
                        or(m.label=='52mm'   and ( w.value<wymiary+6 or w.value>wymiary+10)) %}

                            {#{% if  m.label=='18mm' and !(w.label>'A4-12"x8"' or w.label<'10"x8"' )  %}#}
                            <td onclick="myFunction({{ m.value }},{{ w.value }},'{{ m.label }}' )">
                                {{ w.label ~' '~ m.label }}

                                {#{{ m.value ~' '~ w.value }}#}
                            </td>

                        {% else %}

                            <td onclick="myFunction(0,0,'nic')" bgcolor="#a52a2a">
                                NY
                            </td>
                        {% endif %}
                    {% endfor %}

                </tr>
            {% endfor %}
        </table>


        <script>

            function toggleTable() {
                var lTable = document.getElementById("tabelaZwymiarami");
                lTable.style.display = (lTable.style.display == "table") ? "none" : "table";
            }


            function myFunction(z1, z2) {

                document.getElementById("obrazki_jakoproduktybundle_atrybuty_margines").value = z1;
                document.getElementById("obrazki_jakoproduktybundle_atrybuty_wymiar").value = z2;
                $("#obrazki_jakoproduktybundle_atrybuty_submit").show();

//            document.getElementById("demo").innerHTML = Mnazwa;

                $("#tabelaZwymiarami").hide(400);

                if (z1 == "0") {
                    $("#obrazki_jakoproduktybundle_atrybuty_submit").hide();
                    $("#tabelaZwymiarami").show(400);
                }
            }


            function creator() {
                var obj = {};
                obj.Blank = function () {

                    var c = document.getElementById("plotno");
                    var ctx = c.getContext("2d");
                    var img = new Image();
                    img.src = '{{ asset(entity.getUploadMinaturkaDir~"/" ~ entity.nazwaObrazka  ) }}';

                    ctx.rect(0, {{ margines }}, {{ entity.size.width+margines*2 }}, {{ entity.size.height }});
                    ctx.rect({{ margines }}, 0, {{ entity.size.width }}, {{ entity.size.height+margines*2 }});


                    ctx.drawImage(img, {{ margines }}, {{ margines }}, {{ entity.size.width }}, {{ entity.size.Height }});


                    ctx.stroke();
                    return c;


                    // tu cos robimy;
                };
                obj.Custom = function () {


                    var c = document.getElementById("plotno");
                    var ctx = c.getContext("2d");
                    var img = new Image();
                    img.src = '{{ asset(entity.getUploadMinaturkaDir~"/" ~ entity.nazwaObrazka  ) }}';

                    ctx.fillStyle = "#FF0000";
                    ctx.fillRect(0, {{ margines }}, {{ entity.size.width+margines*2 }}, {{ entity.size.height }});
                    ctx.fillRect({{ margines }}, 0, {{ entity.size.width }}, {{ entity.size.height+margines*2 }});


                    ctx.drawImage(img, {{ margines }}, {{ margines }}, {{ entity.size.width }}, {{ entity.size.Height }});

                    ctx.stroke();
                    return c;

                };


                obj.Stretch = function () {
                    var c = document.getElementById("plotno");
                    var ctx = c.getContext("2d");
                    var img = new Image();
                    img.src = '{{ asset(entity.getUploadMinaturkaDir~"/" ~ entity.nazwaObrazka  ) }}';


                    ctx.drawImage(img, 0, 0, {{ entity.size.width }}, {{ entity.size.Height }});

                    ctx.moveTo({{ margines }}, {{ margines }});
                    ctx.lineTo({{ entity.size.width-margines }}, {{ margines }});
                    ctx.lineTo({{ entity.size.width-margines }}, {{ entity.size.Height-margines }});
                    ctx.lineTo({{ margines }}, {{ entity.size.Height-margines }});
                    ctx.lineTo({{ margines }}, {{ margines }});

                    ctx.fillStyle = "#FF0000";
                    ctx.fillRect(0, 0, {{ margines }}, {{ margines }});
                    ctx.fillRect({{ entity.size.width-margines }}, 0, {{ margines }}, {{ margines }});
                    ctx.fillRect(0, {{entity.size.height-margines}}, {{margines}}, {{margines}});
                    ctx.fillRect({{ entity.size.width-margines }}, {{ entity.size.height-margines }}, {{ margines }}, {{ margines }});

                    ctx.stroke();

                    return c;
                };

                obj.Mirror = function () {
                    var c = document.getElementById("plotno");
                    var ctx = c.getContext("2d");
                    var img = new Image();
                    img.src = '{{ asset(entity.getUploadMinaturkaDir~"/" ~ entity.nazwaObrazka  ) }}';


                    ctx.drawImage(img, 0, 0, {{ entity.size.width }}, {{ entity.size.Height }});

                    ctx.moveTo({{ margines }}, {{ margines }});
                    ctx.lineTo({{ entity.size.width-margines }}, {{ margines }});
                    ctx.lineTo({{ entity.size.width-margines }}, {{ entity.size.Height-margines }});
                    ctx.lineTo({{ margines }}, {{ entity.size.Height-margines }});
                    ctx.lineTo({{ margines }}, {{ margines }});

                    ctx.fillStyle = "#FFFFFF";
                    ctx.fillRect(0, 0, {{ margines }}, {{ margines }});
                    ctx.fillRect({{ entity.size.width-margines }}, 0, {{ margines }}, {{ margines }});
                    ctx.fillRect(0, {{entity.size.height-margines}}, {{margines}}, {{margines}});
                    ctx.fillRect({{ entity.size.width-margines }}, {{ entity.size.height-margines }}, {{ margines }}, {{ margines }});

                    ctx.stroke();
                    return c;
                };
                return obj;
            }


            //        for (var i = 0; i <= 9; i++)  {
            //            (function(i) {
            //                setTimeout(function() {
            //                    console.log(i);
            //                }, i*1000);
            //            })(i);
            //        }


            //---------------------------------------------------------------------------------------------------


            //-------------------------------------------------------------------------------------


            window.onload = function () {
//            document.getElementById("pudelko").innerHTML = 'Blank';

                var zd = new creator();
                document.getElementById("plotno").innerHTML = zd.Blank();


            };


            function zdjecie() {

                Filters = {};
                Filters.getPixels = function (img) {
                    var c = this.getCanvas(img.width, img.height);
                    var ctx = c.getContext('2d');
                    ctx.drawImage(img);
                    return ctx.getImageData(0, 0, c.width, c.height);
                };

                Filters.getCanvas = function (w, h) {
                    var c = document.createElement('canvas');
                    c.width = w;
                    c.height = h;
                    return c;
                };


                Filters.filterImage = function (filter, image, var_args) {
                    var args = [this.getPixels(image)];
                    for (var i = 2; i < arguments.length; i++) {
                        args.push(arguments[i]);
                    }
                    return filter.apply(null, args);
                };

                Filters.grayscale = function (pixels, args) {
                    var d = pixels.data;
                    for (var i = 0; i < d.length; i += 4) {
                        var r = d[i];
                        var g = d[i + 1];
                        var b = d[i + 2];
                        // CIE luminance for the RGB
                        // The human eye is bad at seeing red and blue, so we de-emphasize them.
                        var v = 0.2126 * r + 0.7152 * g + 0.0722 * b;
                        d[i] = d[i + 1] = d[i + 2] = v
                    }
                    return pixels;
                };

            }


            function rysuj(nazwaWrapu) {


                var zd = new creator();


                if (nazwaWrapu == 'Custom') {
                    document.getElementById("plotno").innerHTML = zd.Custom();
//                document.getElementById("pudelko").innerHTML = 'custom';
                }
                else if (nazwaWrapu == 'Mirror') {
                    document.getElementById("plotno").innerHTML = zd.Mirror();
                }
                else if (nazwaWrapu == 'Stretch') {
                    document.getElementById("plotno").innerHTML = zd.Stretch();
                }
                else if (nazwaWrapu == 'Blank') {
                    document.getElementById("plotno").innerHTML = zd.Blank();
//                document.getElementById("pudelko").innerHTML = 'blank';
                }


//            var img = document.getElementById('orig');
//            var canvases = document.getElementsByTagName('canvas');
//            for (var i=0; i<canvases.length; i++) {
//                var c = canvases[i];
//                c.parentNode.insertBefore(img.cloneNode(true), c);
//                c.style.display = 'none';
//            }
//            var idata = Filters.filterImage(Filters.grayscale(), img, arg1, arg2, arg3);
//            c.width = idata.width;
//            c.height = idata.height;
//            var ctx = c.getContext('2d');
//            ctx.putImageData(idata, 0, 0);


            }


            function funkcja() {

                var e = document.getElementById("obrazki_jakoproduktybundle_atrybuty_wrapy");
                var filtr = e.options[e.selectedIndex].text;

//            document.getElementById("pudelko").innerHTML = filtr;
//
//            var nazwaClasyJakoFiltr=document.getElementById("pudelko").innerText;
//            var x = document.getElementsByClassName(nazwaClasyJakoFiltr);
//            x[0].className = filtr;


                var c = document.getElementById("plotno");
                var ctx = c.getContext("2d");
                ctx.fillStyle = "#FFFFFF";

                ctx.save();

// Use the identity matrix while clearing the canvas
                ctx.setTransform(1, 0, 0, 1, 0, 0);
                ctx.clearRect(0, 0, {{ entity.size.width+margines*2 }}, {{ entity.size.Height+margines*2 }});

// Restore the transform
                ctx.restore();


                {#var zdj=zdjecie();#}

                {#var img = document.getElementById('orig');#}

                {#var canvases = document.getElementsByTagName('canvas');#}
                {#console.log(canvases);#}
                {#for (var i=0; i<canvases.length; i++) &#123;&#35;}
                    {#var c = canvases[i];#}
                {#c.parentNode.insertBefore(img.cloneNode(true), c);#}
                {#c.style.display = 'none';#}
                {#}#}

                {#zdj.getPixels(canvases);#}

                {#zdj.getCanvas({{ entity.size.width+margines*2 }},{{ entity.size.Height+margines*2 }});#}
                {#zdj.filterImage(zdj.grayscale());#}

                {#console.log(zdj);#}

                {#ctx.putImageData(zdj, 0, 0);#}

                {#ctx.stroke();#}


                rysuj(filtr);


            }


        </script>



        {{ form_rest(form) }}


        {{ form_end(form) }}




    {% else %}
        {% set margines=50 %}


        <img id="orig" src="{{ asset(entity.getUploadMinaturkaDir~"/" ~ entity.nazwaObrazka  ) }}" alt=""
                />
        {#ukryty obrazek poto żeby to działało#}


        {#<canvas id="plotno" width="{{ entity.size.width+margines*2 }}" height="{{ entity.size.Height+margines*2 }}">#}
        {#Your browser does not support the HTML5 canvas tag.#}
        {#</canvas>#}

        {{ form(form) }}
    {% endif %}

{% endblock %}
